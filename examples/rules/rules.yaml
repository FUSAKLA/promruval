# ignore_validations: hasAllowedLimit
groups:
  - name: group1
    interval: 1m
    limit: 10
    rules:
      # foo bar
      - record: foo:recorded_metrics:bar
        expr: 1
        labels:
          foo: bar

      - alert: testExperimentalPromQL
        expr: |
          # ignore_validations: expressionCanBeEvaluated, expressionDoesNotUseExperimentalFunctions, hasLabels, hasAnyOfAnnotations, hasAnnotations
          sort_by_label(
            up,
            "instance"
          )

  # ignore_validations: labelHasAllowedValue
  - name: testGroup
    limit: 1000
    rules:
      # Comment before.
      # Comment on the same line. ignore_validations: expressionSelectorsMatchesAnything, expressionDoesNotUseOlderDataThan
      # Comment after.
      - alert: test
        expr: avg_over_time(max_over_time(up{job="prometheus"}[10h] offset 10d)[10m:10m])
        for: 4w
        keep_firing_for: 5m
        labels:
          severity: critica
          team: sre@mail.com
          page: true
          foo: "{{ $labels.foo }}"
        annotations:
          title: test alert
          playbook: http://foo.bar/nonexisting/playbook
          disabled_validation_rules: check-team-label,check-prometheus-limitations

  - name: testIgnoreValidationsInExpr
    limit: 10
    rules:
      - alert: test
        expr: |
          # Comment before.
          # Comment on the same line. ignore_validations: labelHasAllowedValue
          # Comment after.
          kube_pod_labels{
            # ignore_validations: expressionSelectorsMatchesAnything, hasLabels
          }
        for: 1m
        labels:
          team: "{{ .Labels.team }}"
        annotations:
          title: test alert
          playbook: http://foo.bar/nonexisting/playbook

      - alert: test2
        expr: up == 0
        for: 1m
        labels:
          team: "{{ .Labels.team }}"
          xxx: fooo
          severity: critical
        annotations:
          title: test alert
          playbook: http://foo.bar/nonexisting/playbook
